{
    parserClass="nl.tudelft.intelligoal.core.language.test.grammer.TestParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Test"
    psiImplClassSuffix="Impl"
    psiPackage="nl.tudelft.core.language.test.grammer.psi.iface"
    psiImplPackage="nl.tudelft.core.language.test.grammer.psi.impl"
    psiImplUtilClass="nl.tudelft.core.language.test.grammer.psi.impl.TestImpl"

    elementTypeHolderClass="nl.tudelft.intelligoal.core.language.test.grammer.TestTypes"
    elementTypeClass="nl.tudelft.intelligoal.core.language.test.grammer.TestElementType"
    tokenTypeClass="nl.tudelft.intelligoal.core.language.test.grammer.TestTokenType"

     tokens = [
            USE = 'use'
            AS = 'as'
            KNOWLEDGE = 'knowledge'
            MODULE = 'module'
            MAS = 'mas'

            TEST = 'test'
            WITH = 'with'
            PRE = 'pre'
            POST = 'post'
            IN = 'in'

            NOT = 'not'
            TRUE = 'true'

            IS = 'is'
            DO = 'do'

            LEADSTO = 'leadsto'
            EVENTUALLY = 'eventually'

            BEL = 'bel'
            GOAL = 'goal'
            AGOAL = 'a-goal'
            GOALA = 'goal-a'
            PERCEPT = 'percept'
            SENT = 'sent'

            BANG = '!'
            WHAT = '?'

            OBRACKET = '['
            CBRACKET = ']'
            OPAREN = '('
            CPAREN = ')'
            OPEN_CURLY = '{'
            CLOSE_CURLY = '}'

            SEMI = ";"
            BAR = "|"
            IMPLIES = "->"
            SOFT_IMPLIES = "*->"
            NOT = "\+"
            LT = "<"
            EQ = '='
            UNIV = "=.."
            VARIANT = "=@="
            NOT_VARIANT = "\=@="
            EVALUATES = "=:="
            LEQ = "=<"
            IDENTICAL = "=="
            NOT_IDENTICAL = "=\="
            GT = ">"
            GE = ">="
            GENERAL_LT = "@<"
            GENERAL_LE = "@=<"
            GENERAL_GT = "@>"
            GENERAL_GE = "@>="
            NOT_UNIFY = "\="
            NOT_IDENTICAL = "\=="
            PARTIAL_UNIFICATION = ">:<"
            COLON = ':'
            PLUS = '+'
            MINUS = '-'
            BITWISE_AND = '/\'
            BITWISE_OR = '\/'
            STAR = "*"
            INT_DIV = "//"
            BITSHIFT_LEFT = '<<'
            BITSHIFT_RIGHT = '>>'
            POW = '**'
            POW2 = '^'
            INV = '\'
            SLASH = '/'

            DOT = '.'
            COMMA = ','


            INTEGER = "regexp:-?[0-9]+|0b[01]+|0o[0-7]+|0x[0-9A-Fa-f]+|[0-9]{1,2}'[0-9A-Za-z]+"
            REAL = "regexp:-?[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?"

            SQSTRING = "regexp:'([^'\\]|\\.)*?'"
            DQSTRING = 'regexp:"([^"\\]|\\.)*?"'

            ATOM = "regexp:([a-z][A-Za-z0-9_]*)|('([^'\\]|\\.)*?')"

            VARIABLE = "regexp:[A-Z_][A-Za-z0-9_]*"

            LINE_COMMENT = 'regexp:%[^\r\n]*'
        ]
}

root ::= useClause+ timeoutDef testModule+ agentDef+

//Use rules
useClause ::= 'use' fileReference ('as' usage)? '.' {pin=1 recoverWhile=recover_topClause}
usage ::= 'knowledge' | 'module' | 'mas'
fileReference ::= string | identifier

// Defining the timeout variable
timeoutDef ::= 'timeout' '=' number '.' {pin = 1}

// Defining the tests for an agent
testModule ::= 'test' identifier 'with' 'pre' '{' rule+ '}' 'in' '{' rule+ '}' 'post' '{' rule+ '}'
rule ::= leadstoRule | eventuallyRule
leadstoRule ::= queryList 'leadsto' queryList
eventuallyRule ::= 'eventually' queryList

queryList ::= query (',' query)* {name=query}
private simpleQuery ::= selectorQuery | predicate
private selectorQuery ::= (belQuery | goalQuery | perceptQuery | mailQuery)
private invertedQuery ::= 'not' '(' simpleQuery ')'
query ::= invertedQuery | simpleQuery

private belQuery ::= 'bel' '(' termList ')' {pin=1}
private goalQuery ::= ('goal' | 'a-goal' | 'goal-a') '(' termList ')' {pin=1}
private perceptQuery ::= 'percept' '(' termList ')' {pin=1}
private mailQuery ::= 'sent'mood? '(' termList ')' {pin=1}


termList ::= term(',' term)* {name = term}

term::= enclosedTerm | nakedTerm
private enclosedTerm ::= '(' nakedTerm ')' {name = term pin='('}
private nakedTerm ::= basicTerm (binaryOperator basicTerm)+ | prefixOperator+ basicTerm+ | basicTerm {name=term}
basicTerm ::= predicate | VARIABLE | number | string | '(' termList ')' | list {name = term}


private binaryOperator ::= op_disjunction | op_bar | op_implies | op_soft_implies | op_lt | op_unify | op_univ | op_variant | op_not_variant | op_evaluates | op_leq | op_identical | op_not_identical | op_gt | op_ge | op_general_lt | op_general_le | op_general_gt | op_general_ge | op_not_unify | op_partial_unification | op_colon | op_plus | op_minus | op_bitwise_and | op_bitwise_or | op_mult | op_div | op_int_div | op_bitshift_left | op_bitshift_right | op_pow | op_pow2 | op_as | op_not_identical2 | ATOM
private prefixOperator ::= op_plus | op_minus | op_not

predicate ::= identifier ['(' termList ')'] {pin='('}
mood::= ':' | '?' | '!'

list ::= '[' termlist ']' {pin='['}


// Defining the definition for the agent
agentDef ::= identifier '{' 'do' identifier '}'


number ::= INTERGER | REAL


string ::= DQSTRING | SQSTRING
identifier ::= ATOM | VARIABLE

private recover_topClause ::= !('use'|'test'|'timeout')


// <>:<> OPERATORS! <>:<>
private op_disjunction ::= ";"
private op_bar ::= "|"
private op_implies ::= "->"
private op_soft_implies ::= "*->"
private op_not ::= "\+"
private op_lt ::= "<"
private op_unify ::= "="
private op_univ ::= "=.."
private op_variant ::= "=@="
private op_not_variant ::= "\=@="
private op_evaluates ::= "=:="
private op_leq ::= "=<"
private op_identical ::= "=="
private op_not_identical ::= "=\="
private op_gt ::= ">"
private op_ge ::= ">="
private op_general_lt ::= "@<"
private op_general_le ::= "@=<"
private op_general_gt ::= "@>"
private op_general_ge ::= "@>="
private op_not_unify ::= "\="
private op_not_identical2 ::= "\=="
private op_partial_unification ::= ">:<"
private op_colon ::= ':'
private op_plus ::= '+'
private op_minus ::= '-'
private op_bitwise_and ::= '/\'
private op_bitwise_or ::= '\/'
private op_mult ::= "*"
private op_int_div ::= "//"
private op_bitshift_left ::= '<<'
private op_bitshift_right ::= '>>'
private op_pow ::= '**'
private op_pow2 ::= '^'
private op_inv ::= '\'
private op_as ::= 'as'
private op_is ::= 'is'
private op_div ::= '/'