/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package nl.tudelft.core.language.test.grammer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static nl.tudelft.core.language.test.grammer.TestTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>TestLexer.flex</tt>
 */
public class TestLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\0\1\5\2\0\1\23\1\0\1\3\1\57\1\60\1\51\1\22\1\52\1"+
    "\6\1\20\1\67\1\10\1\12\6\14\2\7\1\66\1\61\1\64\1\50\1\63\1\0\1\65\4\16\1\21"+
    "\1\16\24\17\1\55\1\4\1\56\1\70\1\27\1\0\1\32\1\11\1\54\1\45\1\26\1\24\1\46"+
    "\1\36\1\34\1\25\1\42\1\44\1\41\1\43\1\13\1\53\1\25\1\47\1\31\1\35\1\30\1\25"+
    "\1\33\1\15\2\25\1\37\1\62\1\40\7\0\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0"+
    "\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\2\5"+
    "\2\6\1\7\1\10\1\11\1\12\5\6\1\13\1\14"+
    "\4\6\1\15\1\16\1\17\1\6\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\1\1\30\1\31"+
    "\1\32\1\0\1\33\1\0\1\34\1\35\1\36\2\0"+
    "\1\37\1\5\1\40\1\0\1\5\5\0\2\6\1\0"+
    "\1\41\1\6\1\42\1\43\7\6\1\0\1\44\1\45"+
    "\3\0\1\46\3\6\1\47\1\50\1\0\1\51\1\0"+
    "\1\52\1\53\1\54\1\55\1\56\1\0\1\5\1\57"+
    "\1\0\1\57\3\5\1\60\1\61\1\0\3\6\1\62"+
    "\1\6\1\34\2\6\1\63\1\64\1\65\1\66\2\6"+
    "\1\67\1\70\1\71\1\72\1\73\1\0\1\74\1\75"+
    "\3\6\1\76\1\77\1\6\1\0\3\6\1\0\1\6"+
    "\1\100\1\101\1\6\1\102\1\103\2\6\1\104\1\6"+
    "\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\71\0\71\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\71\0\71\0\u0402\0\u043b"+
    "\0\u0474\0\u04ad\0\u04e6\0\u051f\0\71\0\u0558\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\u0591\0\u05ca\0\u0603\0\71"+
    "\0\u063c\0\71\0\253\0\71\0\u0675\0\71\0\u06ae\0\71"+
    "\0\u011d\0\u06e7\0\71\0\u0720\0\71\0\u0759\0\u0792\0\u07cb"+
    "\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u023a"+
    "\0\u0993\0\u023a\0\u023a\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\71\0\71\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\71\0\u0c3f\0\u0c78\0\u0cb1\0\71\0\71\0\u0cea\0\71"+
    "\0\u0d23\0\u0d5c\0\71\0\71\0\71\0\71\0\u0d95\0\u0759"+
    "\0\u0dce\0\u0e07\0\u0e07\0\u083d\0\u0876\0\u08af\0\u023a\0\u023a"+
    "\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u023a\0\u0f24\0\u023a\0\u0f5d"+
    "\0\u0f96\0\71\0\71\0\71\0\71\0\u0fcf\0\u1008\0\u023a"+
    "\0\71\0\71\0\71\0\71\0\u1041\0\u023a\0\u023a\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u023a\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\71\0\u023a\0\u12ed\0\u023a\0\71"+
    "\0\u1326\0\u135f\0\u023a\0\u1398\0\u023a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\10\1\13\1\10\1\13\2\14\1\15\1\14"+
    "\1\16\1\17\3\13\1\14\1\20\1\13\1\21\1\22"+
    "\1\23\1\24\1\13\1\25\1\26\1\27\1\30\1\31"+
    "\2\13\1\32\1\13\1\33\1\34\1\35\1\36\1\13"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\72\0\2\3\66\0\3\53"+
    "\1\54\1\55\64\53\22\0\1\56\25\0\1\57\16\0"+
    "\1\60\1\0\4\61\1\62\1\63\63\61\7\0\2\64"+
    "\1\0\1\64\1\0\1\64\46\0\1\65\10\0\1\66"+
    "\3\0\2\67\1\0\1\67\1\0\1\67\3\0\1\70"+
    "\1\71\4\0\1\71\45\0\1\66\3\0\2\67\1\72"+
    "\1\67\1\73\1\67\1\74\2\0\1\70\1\71\4\0"+
    "\1\71\51\0\11\13\1\0\1\13\2\0\2\13\1\75"+
    "\10\13\2\0\7\13\3\0\2\13\23\0\11\13\1\0"+
    "\1\13\2\0\13\13\2\0\7\13\3\0\2\13\23\0"+
    "\11\14\1\0\1\14\2\0\13\14\2\0\7\14\3\0"+
    "\2\14\14\0\1\17\1\0\67\17\7\0\11\13\1\0"+
    "\1\13\2\0\5\13\1\76\5\13\2\0\7\13\3\0"+
    "\2\13\22\0\1\77\11\13\1\0\1\13\2\0\5\13"+
    "\1\100\5\13\2\0\7\13\3\0\2\13\23\0\11\13"+
    "\1\0\1\13\2\0\10\13\1\101\2\13\2\0\7\13"+
    "\3\0\2\13\23\0\11\13\1\0\1\13\2\0\5\13"+
    "\1\102\5\13\2\0\2\13\1\103\4\13\3\0\2\13"+
    "\23\0\11\13\1\0\1\13\2\0\13\13\2\0\6\13"+
    "\1\104\3\0\2\13\23\0\4\13\1\105\4\13\1\0"+
    "\1\13\2\0\6\13\1\106\4\13\2\0\7\13\3\0"+
    "\2\13\23\0\11\13\1\0\1\13\2\0\13\13\2\0"+
    "\2\13\1\107\4\13\3\0\2\13\23\0\4\13\1\110"+
    "\4\13\1\0\1\13\2\0\4\13\1\111\6\13\2\0"+
    "\7\13\3\0\2\13\23\0\4\13\1\112\4\13\1\0"+
    "\1\13\2\0\13\13\2\0\7\13\3\0\2\13\34\0"+
    "\1\113\27\0\1\114\13\0\1\115\1\116\1\117\10\0"+
    "\1\120\42\0\1\121\26\0\4\13\1\122\4\13\1\0"+
    "\1\13\2\0\2\13\1\123\10\13\2\0\6\13\1\124"+
    "\3\0\2\13\64\0\1\125\12\0\1\126\2\0\1\127"+
    "\66\0\1\130\54\0\1\131\12\0\1\132\1\133\10\0"+
    "\1\134\62\0\1\135\1\0\1\53\1\0\67\53\50\0"+
    "\1\136\14\0\1\137\3\0\1\61\1\0\67\61\7\0"+
    "\2\64\1\0\1\64\1\0\1\64\3\0\1\70\1\71"+
    "\4\0\1\71\51\0\11\140\1\0\1\140\2\0\3\140"+
    "\1\0\7\140\2\0\7\140\3\0\2\140\17\0\1\66"+
    "\3\0\2\64\1\0\1\64\1\0\1\64\3\0\1\70"+
    "\1\71\4\0\1\71\51\0\2\141\1\0\1\141\1\0"+
    "\1\141\62\0\1\142\2\143\1\0\1\143\1\0\1\143"+
    "\5\0\1\142\56\0\1\144\1\0\1\144\66\0\1\145"+
    "\1\0\1\145\1\0\1\145\63\0\4\146\1\0\1\146"+
    "\1\0\1\146\2\0\1\146\2\0\1\146\1\0\1\146"+
    "\3\0\1\146\12\0\1\146\6\0\1\146\23\0\11\13"+
    "\1\0\1\13\2\0\13\13\2\0\3\13\1\147\3\13"+
    "\3\0\2\13\23\0\11\13\1\0\1\13\2\0\2\13"+
    "\1\150\10\13\2\0\7\13\3\0\2\13\62\0\1\151"+
    "\31\0\11\13\1\0\1\13\2\0\11\13\1\152\1\13"+
    "\2\0\7\13\3\0\2\13\23\0\11\13\1\0\1\13"+
    "\2\0\4\13\1\153\6\13\2\0\7\13\3\0\2\13"+
    "\23\0\11\13\1\0\1\13\2\0\13\13\2\0\4\13"+
    "\1\154\2\13\3\0\2\13\23\0\11\13\1\0\1\13"+
    "\2\0\5\13\1\155\5\13\2\0\7\13\3\0\2\13"+
    "\23\0\4\13\1\156\4\13\1\0\1\13\2\0\13\13"+
    "\2\0\7\13\3\0\2\13\23\0\11\13\1\0\1\13"+
    "\2\0\11\13\1\157\1\13\2\0\7\13\3\0\2\13"+
    "\23\0\11\13\1\0\1\13\2\0\13\13\2\0\1\160"+
    "\6\13\3\0\2\13\23\0\11\13\1\0\1\13\2\0"+
    "\6\13\1\161\4\13\2\0\7\13\3\0\2\13\34\0"+
    "\1\162\120\0\1\163\70\0\1\164\103\0\1\165\14\0"+
    "\11\13\1\0\1\13\2\0\5\13\1\166\5\13\2\0"+
    "\7\13\3\0\2\13\23\0\11\13\1\0\1\13\2\0"+
    "\13\13\2\0\6\13\1\167\3\0\2\13\23\0\11\13"+
    "\1\0\1\13\2\0\2\13\1\170\10\13\2\0\7\13"+
    "\3\0\2\13\100\0\1\171\70\0\1\172\54\0\1\173"+
    "\70\0\1\174\27\0\2\141\1\0\1\141\1\0\1\141"+
    "\4\0\1\71\4\0\1\71\51\0\2\143\1\0\1\143"+
    "\1\0\1\143\67\0\1\175\64\0\11\13\1\0\1\13"+
    "\2\0\12\13\1\176\2\0\7\13\3\0\2\13\23\0"+
    "\11\13\1\0\1\13\2\0\2\13\1\177\10\13\2\0"+
    "\7\13\3\0\2\13\23\0\11\13\1\0\1\13\2\0"+
    "\4\13\1\200\6\13\2\0\7\13\3\0\2\13\23\0"+
    "\11\13\1\0\1\13\2\0\7\13\1\201\3\13\2\0"+
    "\7\13\3\0\2\13\23\0\2\13\1\202\6\13\1\0"+
    "\1\13\2\0\13\13\2\0\7\13\3\0\2\13\23\0"+
    "\11\13\1\0\1\13\2\0\13\13\2\0\3\13\1\203"+
    "\3\13\3\0\2\13\23\0\11\13\1\0\1\13\2\0"+
    "\11\13\1\204\1\13\2\0\7\13\3\0\2\13\23\0"+
    "\11\13\1\0\1\13\2\0\13\13\2\0\7\13\3\0"+
    "\1\13\1\205\46\0\1\206\45\0\11\13\1\0\1\13"+
    "\2\0\13\13\2\0\3\13\1\207\3\13\3\0\2\13"+
    "\23\0\11\13\1\0\1\13\2\0\13\13\2\0\3\13"+
    "\1\210\3\13\3\0\2\13\23\0\11\13\1\0\1\13"+
    "\2\0\2\13\1\211\10\13\2\0\7\13\3\0\2\13"+
    "\22\0\1\212\11\13\1\0\1\13\2\0\13\13\2\0"+
    "\7\13\3\0\2\13\23\0\11\13\1\0\1\13\2\0"+
    "\2\13\1\213\10\13\2\0\7\13\3\0\2\13\60\0"+
    "\1\214\33\0\11\13\1\0\1\13\2\0\2\13\1\215"+
    "\10\13\2\0\7\13\3\0\2\13\23\0\11\13\1\0"+
    "\1\13\2\0\2\13\1\216\10\13\2\0\7\13\3\0"+
    "\2\13\23\0\11\13\1\0\1\13\2\0\13\13\2\0"+
    "\6\13\1\217\3\0\2\13\46\0\1\220\45\0\11\13"+
    "\1\0\1\13\2\0\13\13\2\0\7\13\3\0\1\221"+
    "\1\13\23\0\11\13\1\0\1\13\2\0\13\13\2\0"+
    "\4\13\1\222\2\13\3\0\2\13\23\0\11\13\1\0"+
    "\1\13\2\0\11\13\1\223\1\13\2\0\7\13\3\0"+
    "\2\13\23\0\11\13\1\0\1\13\2\0\13\13\2\0"+
    "\5\13\1\224\1\13\3\0\2\13\23\0\11\13\1\0"+
    "\1\13\2\0\2\13\1\225\10\13\2\0\7\13\3\0"+
    "\2\13\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5073];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\2\11\6\1\2\11\6\1\1\11"+
    "\1\1\6\11\3\1\1\11\1\1\1\11\1\0\1\11"+
    "\1\0\1\11\1\1\1\11\2\0\1\11\1\1\1\11"+
    "\1\0\1\1\5\0\2\1\1\0\13\1\1\0\2\11"+
    "\3\0\1\11\3\1\2\11\1\0\1\11\1\0\1\1"+
    "\4\11\1\0\2\1\1\0\6\1\1\0\10\1\4\11"+
    "\3\1\4\11\1\0\10\1\1\0\3\1\1\0\1\1"+
    "\1\11\3\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public TestLexer() {
        this((java.io.Reader)null);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TestLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 70: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 71: break;
          case 3: 
            { return INV;
            }
          case 72: break;
          case 4: 
            { return MINUS;
            }
          case 73: break;
          case 5: 
            { return INTEGER;
            }
          case 74: break;
          case 6: 
            { return ATOM;
            }
          case 75: break;
          case 7: 
            { return VARIABLE;
            }
          case 76: break;
          case 8: 
            { return DOT;
            }
          case 77: break;
          case 9: 
            { return PLUS;
            }
          case 78: break;
          case 10: 
            { return LINE_COMMENT;
            }
          case 79: break;
          case 11: 
            { return OPEN_CURLY;
            }
          case 80: break;
          case 12: 
            { return CLOSE_CURLY;
            }
          case 81: break;
          case 13: 
            { return EQ;
            }
          case 82: break;
          case 14: 
            { return STAR;
            }
          case 83: break;
          case 15: 
            { return COMMA;
            }
          case 84: break;
          case 16: 
            { return OBRACKET;
            }
          case 85: break;
          case 17: 
            { return CBRACKET;
            }
          case 86: break;
          case 18: 
            { return OPAREN;
            }
          case 87: break;
          case 19: 
            { return CPAREN;
            }
          case 88: break;
          case 20: 
            { return SEMI;
            }
          case 89: break;
          case 21: 
            { return BAR;
            }
          case 90: break;
          case 22: 
            { return GT;
            }
          case 91: break;
          case 23: 
            { return LT;
            }
          case 92: break;
          case 24: 
            { return COLON;
            }
          case 93: break;
          case 25: 
            { return SLASH;
            }
          case 94: break;
          case 26: 
            { return POW2;
            }
          case 95: break;
          case 27: 
            { return SQSTRING;
            }
          case 96: break;
          case 28: 
            { return NOT;
            }
          case 97: break;
          case 29: 
            { return NOT_UNIFY;
            }
          case 98: break;
          case 30: 
            { return BITWISE_OR;
            }
          case 99: break;
          case 31: 
            { return DQSTRING;
            }
          case 100: break;
          case 32: 
            { return IMPLIES;
            }
          case 101: break;
          case 33: 
            { return AS;
            }
          case 102: break;
          case 34: 
            { return IS;
            }
          case 103: break;
          case 35: 
            { return IN;
            }
          case 104: break;
          case 36: 
            { return IDENTICAL;
            }
          case 105: break;
          case 37: 
            { return LEQ;
            }
          case 106: break;
          case 38: 
            { return POW;
            }
          case 107: break;
          case 39: 
            { return GE;
            }
          case 108: break;
          case 40: 
            { return BITSHIFT_RIGHT;
            }
          case 109: break;
          case 41: 
            { return BITSHIFT_LEFT;
            }
          case 110: break;
          case 42: 
            { return GENERAL_GT;
            }
          case 111: break;
          case 43: 
            { return GENERAL_LT;
            }
          case 112: break;
          case 44: 
            { return BITWISE_AND;
            }
          case 113: break;
          case 45: 
            { return INT_DIV;
            }
          case 114: break;
          case 46: 
            { return NOT_IDENTICAL;
            }
          case 115: break;
          case 47: 
            { return REAL;
            }
          case 116: break;
          case 48: 
            { return BEL;
            }
          case 117: break;
          case 49: 
            { return USE;
            }
          case 118: break;
          case 50: 
            { return MAS;
            }
          case 119: break;
          case 51: 
            { return UNIV;
            }
          case 120: break;
          case 52: 
            { return VARIANT;
            }
          case 121: break;
          case 53: 
            { return EVALUATES;
            }
          case 122: break;
          case 54: 
            { return SOFT_IMPLIES;
            }
          case 123: break;
          case 55: 
            { return PRE;
            }
          case 124: break;
          case 56: 
            { return PARTIAL_UNIFICATION;
            }
          case 125: break;
          case 57: 
            { return GENERAL_LE;
            }
          case 126: break;
          case 58: 
            { return GENERAL_GE;
            }
          case 127: break;
          case 59: 
            { return NOT_VARIANT;
            }
          case 128: break;
          case 60: 
            { return WITH;
            }
          case 129: break;
          case 61: 
            { return TRUE;
            }
          case 130: break;
          case 62: 
            { return GOAL;
            }
          case 131: break;
          case 63: 
            { return POST;
            }
          case 132: break;
          case 64: 
            { return AGOAL;
            }
          case 133: break;
          case 65: 
            { return MODULE;
            }
          case 134: break;
          case 66: 
            { return NUMBER;
            }
          case 135: break;
          case 67: 
            { return GOALA;
            }
          case 136: break;
          case 68: 
            { return PERCEPT;
            }
          case 137: break;
          case 69: 
            { return KNOWLEDGE;
            }
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
