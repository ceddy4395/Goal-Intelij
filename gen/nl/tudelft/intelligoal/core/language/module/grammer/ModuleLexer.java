/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package nl.tudelft.intelligoal.core.language.module.grammer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>ModuleLexer.flex</tt>
 */
public class ModuleLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\62\1\45\2\0\1\50\1\0\1\37\1\56\1\57\1\70\1\43\1\52"+
    "\1\30\1\41\1\73\1\32\1\33\6\34\2\31\1\72\1\65\1\64\1\53\1\67\1\63\1\71\4\36"+
    "\1\42\1\36\24\40\1\54\1\44\1\55\1\74\1\47\1\0\1\3\1\21\1\4\1\17\1\13\1\22"+
    "\1\20\1\27\1\6\1\46\1\14\1\16\1\24\1\10\1\7\1\12\1\46\1\23\1\11\1\5\1\51\1"+
    "\25\1\15\1\35\1\26\1\46\1\60\1\66\1\61\7\0\1\1\32\0\1\2\337\0\1\2\177\0\13"+
    "\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\21\3\1\4\2\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\1\1\12\1\3\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\1\1\32\1\33"+
    "\1\34\1\3\1\35\2\3\1\0\3\3\1\36\13\3"+
    "\1\37\10\3\1\5\1\40\1\0\1\5\6\0\1\41"+
    "\1\0\1\42\1\43\1\44\2\0\1\45\1\3\1\0"+
    "\1\46\1\47\2\0\1\50\1\51\1\52\1\53\2\0"+
    "\1\54\1\0\1\55\1\56\1\57\1\60\2\3\1\61"+
    "\1\3\1\0\6\3\1\62\2\3\1\63\12\3\1\64"+
    "\4\3\1\65\5\3\1\0\1\66\1\5\1\66\3\5"+
    "\1\67\1\0\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\4\3\1\0\1\100\1\61\1\101\5\3"+
    "\1\102\1\103\3\3\1\104\5\3\1\105\1\106\6\3"+
    "\1\107\3\3\1\110\1\0\1\3\1\111\2\3\1\112"+
    "\2\3\1\113\1\0\5\3\1\114\1\0\2\3\1\115"+
    "\5\3\1\116\1\117\2\3\1\0\1\3\1\120\1\3"+
    "\1\121\1\122\1\123\1\3\1\124\1\120\1\125\3\3"+
    "\1\126\1\0\3\3\1\127\2\3\1\0\5\3\1\0"+
    "\1\120\1\3\1\120\1\0\1\3\1\130\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b"+
    "\0\u05b8\0\75\0\75\0\u05f5\0\u0632\0\u066f\0\u06ac\0\75"+
    "\0\u06e9\0\75\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\u0726\0\75\0\75\0\u0763\0\u07a0\0\u07dd\0\75"+
    "\0\u081a\0\75\0\u0857\0\364\0\u0894\0\u08d1\0\u090e\0\u094b"+
    "\0\u0988\0\u09c5\0\364\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6"+
    "\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\364\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\75\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034"+
    "\0\u05b8\0\75\0\u1071\0\75\0\u10ae\0\75\0\u0632\0\u10eb"+
    "\0\75\0\u1128\0\u1165\0\75\0\75\0\u11a2\0\u11df\0\75"+
    "\0\75\0\75\0\75\0\u121c\0\u1259\0\75\0\u1296\0\75"+
    "\0\u12d3\0\75\0\75\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404"+
    "\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\364\0\u15af"+
    "\0\u15ec\0\364\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a"+
    "\0\u1797\0\u17d4\0\u1811\0\u184e\0\364\0\u188b\0\u18c8\0\u1905"+
    "\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed"+
    "\0\u1aed\0\u0f40\0\u1b2a\0\u0fba\0\u0ff7\0\u1034\0\75\0\u1b67"+
    "\0\364\0\75\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\364\0\364\0\364"+
    "\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\364\0\364\0\u1e06"+
    "\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee"+
    "\0\364\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199"+
    "\0\75\0\u21d6\0\u2213\0\u2250\0\364\0\u228d\0\u22ca\0\364"+
    "\0\u2307\0\u2344\0\364\0\u2381\0\u23be\0\364\0\u23fb\0\u2438"+
    "\0\u2475\0\u24b2\0\u24ef\0\u252c\0\364\0\u2569\0\u25a6\0\u25e3"+
    "\0\364\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\75\0\364"+
    "\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\364\0\364"+
    "\0\75\0\u28bf\0\364\0\u28fc\0\364\0\u2939\0\u2976\0\u29b3"+
    "\0\364\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\364\0\u2ae4\0\u2b21"+
    "\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09"+
    "\0\u2d46\0\364\0\u2d83\0\u2dc0\0\75\0\u2dfd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\5\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\3\5\1\25\1\26\1\27"+
    "\2\26\1\5\1\30\1\31\1\30\1\32\1\30\1\33"+
    "\1\34\1\35\1\5\1\30\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\76\0\2\3\75\0\1\5\1\63\4\5\1\64"+
    "\4\5\1\65\1\66\10\5\1\67\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\25\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\20\5\1\70\3\5\1\71\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\0"+
    "\1\5\26\0\5\5\1\72\11\5\1\73\5\5\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\0"+
    "\1\5\26\0\20\5\1\74\4\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\26\0"+
    "\4\5\1\75\3\5\1\76\14\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\26\0"+
    "\4\5\1\77\3\5\1\100\14\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\26\0"+
    "\10\5\1\101\7\5\1\102\4\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\26\0"+
    "\25\5\1\0\4\5\1\103\1\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\5\5\1\104"+
    "\17\5\1\0\6\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\0\1\5\26\0\3\5\1\105\1\106\20\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\4\5\1\107\3\5\1\110\7\5"+
    "\1\111\4\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\4\5\1\112\20\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\10\5\1\113\14\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\3\5\1\114\1\115\20\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\26\0"+
    "\1\116\24\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\4\5\1\117\20\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\54\0\4\120\32\0\1\121\20\0\1\122"+
    "\15\0\4\123\2\0\1\124\1\0\1\125\1\122\41\0"+
    "\1\126\3\0\1\122\5\0\1\127\7\0\4\123\1\130"+
    "\1\0\1\124\1\0\1\125\1\122\35\0\25\30\1\0"+
    "\6\30\1\0\1\30\1\0\1\30\3\0\2\30\1\0"+
    "\1\30\23\0\37\131\1\132\4\131\1\133\30\131\43\0"+
    "\1\134\7\0\1\135\17\0\1\136\1\0\44\137\1\140"+
    "\1\141\27\137\1\36\1\0\73\36\3\0\6\5\1\142"+
    "\16\5\1\0\6\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\0\1\5\64\0\1\143\11\0\1\144\10\0"+
    "\1\145\4\0\1\146\1\147\32\0\1\150\33\0\1\151"+
    "\63\0\1\152\13\0\1\153\2\0\1\154\32\0\1\155"+
    "\37\0\1\156\57\0\1\157\10\0\1\160\2\0\1\161"+
    "\51\0\1\162\26\0\1\163\4\0\2\5\1\164\22\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\12\5\1\165\1\166\11\5\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\0"+
    "\1\5\26\0\4\5\1\167\20\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\43\0"+
    "\1\170\57\0\25\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\171\26\0\3\5\1\172"+
    "\4\5\1\173\14\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\6\5\1\174"+
    "\16\5\1\0\6\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\0\1\5\26\0\14\5\1\175\10\5\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\0"+
    "\1\5\26\0\1\176\1\5\1\177\2\5\1\200\7\5"+
    "\1\201\7\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\12\5\1\202\7\5"+
    "\1\203\2\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\21\5\1\204\3\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\5\5\1\205\5\5\1\206\11\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\20\5\1\207\4\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\3\5\1\210\21\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\3\5"+
    "\1\211\21\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\4\5\1\212\20\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\5\5\1\213\1\214\16\5\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\0"+
    "\1\5\26\0\15\5\1\215\7\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\26\0"+
    "\13\5\1\216\3\5\1\217\5\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\26\0"+
    "\4\5\1\220\20\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\1\221\24\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\13\5\1\222\11\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\13\5\1\223\11\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\1\5"+
    "\1\224\16\5\1\225\4\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\5\5"+
    "\1\226\17\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\14\5\1\227\10\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\36\0\1\122\15\0\4\120\4\0\1\125"+
    "\1\122\62\0\1\230\4\231\6\0\1\230\44\0\1\122"+
    "\15\0\4\120\2\0\1\124\1\0\1\125\1\122\35\0"+
    "\25\232\1\0\6\232\1\0\1\232\1\0\1\232\3\0"+
    "\1\232\2\0\1\232\54\0\4\233\72\0\3\234\72\0"+
    "\2\235\44\0\2\236\6\0\1\236\3\0\1\236\1\0"+
    "\2\236\6\0\4\236\1\0\1\236\3\0\1\236\32\0"+
    "\1\131\1\0\73\131\53\0\1\237\15\0\1\240\3\0"+
    "\1\137\1\0\73\137\3\0\10\5\1\241\14\5\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\0"+
    "\1\5\64\0\1\242\106\0\1\243\74\0\1\244\105\0"+
    "\1\245\77\0\1\246\71\0\1\247\63\0\1\250\24\0"+
    "\3\5\1\251\21\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\1\252\24\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\4\5\1\253\20\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\7\5\1\254\15\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\32\0\1\255"+
    "\70\0\10\5\1\256\14\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\6\5"+
    "\1\257\16\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\5\5\1\260\17\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\10\5\1\261\14\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\10\5\1\262\14\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\1\5"+
    "\1\263\23\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\10\5\1\202\14\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\4\5\1\264\20\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\10\5\1\265\14\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\10\5"+
    "\1\166\14\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\2\5\1\266\11\5"+
    "\1\267\10\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\10\5\1\270\6\5"+
    "\1\257\5\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\1\5\1\271\23\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\5\5\1\272\17\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\2\5\1\273\22\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\12\5"+
    "\1\274\12\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\10\5\1\275\14\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\2\5\1\276\22\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\10\5\1\277\14\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\3\5"+
    "\1\300\21\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\7\5\1\301\15\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\13\5\1\302\11\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\3\5\1\303\21\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\2\5"+
    "\1\304\22\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\25\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\305"+
    "\26\0\1\306\24\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\14\5\1\307"+
    "\10\5\1\0\6\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\0\1\5\26\0\25\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\310\54\0"+
    "\4\231\53\0\1\122\15\0\4\233\5\0\1\122\105\0"+
    "\1\311\24\0\4\5\1\312\20\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\26\0"+
    "\23\5\1\313\1\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\2\5\1\314"+
    "\22\5\1\0\6\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\0\1\5\26\0\2\5\1\315\22\5\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\0"+
    "\1\5\26\0\1\316\74\0\20\5\1\317\4\5\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\0"+
    "\1\5\26\0\20\5\1\320\4\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\26\0"+
    "\2\5\1\321\22\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\1\322\24\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\20\5\1\323\4\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\1\5\1\324\23\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\10\5"+
    "\1\325\14\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\2\5\1\326\22\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\25\5\1\327\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\13\5"+
    "\1\330\11\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\1\331\24\5\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\0"+
    "\1\5\26\0\1\332\24\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\2\5"+
    "\1\333\22\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\5\5\1\334\17\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\6\5\1\335\16\5\1\336\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\10\5\1\337\14\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\10\5"+
    "\1\340\14\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\6\5\1\341\16\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\13\5\1\342\11\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\4\5\1\343\20\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\13\5"+
    "\1\344\11\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\5\5\1\345\17\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\6\5\1\323\16\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\24\5\1\346\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\41\0\1\347\61\0"+
    "\2\5\1\350\22\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\3\5\1\351"+
    "\21\5\1\0\6\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\0\1\5\26\0\13\5\1\313\11\5\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\0"+
    "\1\5\26\0\2\5\1\202\22\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\26\0"+
    "\7\5\1\352\15\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\47\0\1\353\53\0"+
    "\10\5\1\354\14\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\20\5\1\355"+
    "\4\5\1\0\6\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\0\1\5\26\0\13\5\1\356\11\5\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\0"+
    "\1\5\26\0\10\5\1\357\14\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\26\0"+
    "\10\5\1\360\14\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\1\361\74\0"+
    "\17\5\1\362\5\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\20\5\1\202"+
    "\4\5\1\0\6\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\0\1\5\26\0\13\5\1\363\11\5\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\0"+
    "\1\5\26\0\21\5\1\364\3\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\26\0"+
    "\10\5\1\365\14\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\6\5\1\366"+
    "\16\5\1\0\6\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\0\1\5\26\0\10\5\1\367\14\5\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\0"+
    "\1\5\26\0\4\5\1\370\20\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\26\0"+
    "\2\5\1\371\22\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\32\0\1\372\70\0"+
    "\14\5\1\373\10\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\1\374\17\5"+
    "\1\375\4\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\13\5\1\376\11\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\6\5\1\335\16\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\1\377\24\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\7\5\1\u0100"+
    "\15\5\1\0\6\5\1\0\1\5\1\0\1\5\3\0"+
    "\2\5\1\0\1\5\26\0\20\5\1\257\4\5\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\3\0\2\5\1\0"+
    "\1\5\26\0\5\5\1\323\17\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\42\0"+
    "\1\u0101\60\0\15\5\1\u0102\7\5\1\0\6\5\1\0"+
    "\1\5\1\0\1\5\3\0\2\5\1\0\1\5\26\0"+
    "\13\5\1\u0103\11\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\3\0\2\5\1\0\1\5\26\0\1\u0104\24\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\13\5\1\u0105\11\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\10\5\1\u0106\14\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\74\0\1\u0107"+
    "\26\0\10\5\1\335\14\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\13\5"+
    "\1\u0108\11\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\5\5\1\u0109\17\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\26\0\13\5\1\u010a\11\5\1\0\6\5"+
    "\1\0\1\5\1\0\1\5\3\0\2\5\1\0\1\5"+
    "\26\0\1\5\1\335\23\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\41\0\1\u010b"+
    "\61\0\20\5\1\375\4\5\1\0\6\5\1\0\1\5"+
    "\1\0\1\5\3\0\2\5\1\0\1\5\26\0\14\5"+
    "\1\u010c\10\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\36\0\1\u010d\64\0\4\5"+
    "\1\u010e\20\5\1\0\6\5\1\0\1\5\1\0\1\5"+
    "\3\0\2\5\1\0\1\5\26\0\21\5\1\u010a\3\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\3\0\2\5"+
    "\1\0\1\5\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11834];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\2\11\4\1\1\11\1\1\10\11"+
    "\1\1\2\11\3\1\1\11\1\1\1\11\4\1\1\0"+
    "\31\1\1\11\1\0\1\1\6\0\1\11\1\0\1\11"+
    "\1\1\1\11\2\0\1\11\1\1\1\0\2\11\2\0"+
    "\4\11\2\0\1\11\1\0\1\11\1\1\2\11\4\1"+
    "\1\0\37\1\1\0\6\1\1\11\1\0\1\1\7\11"+
    "\4\1\1\0\33\1\1\11\4\1\1\0\10\1\1\0"+
    "\6\1\1\0\10\1\1\11\3\1\1\0\5\1\1\11"+
    "\10\1\1\0\6\1\1\0\5\1\1\0\3\1\1\0"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public ModuleLexer() {
        this((java.io.Reader)null);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ModuleLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 89: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 90: break;
          case 3: 
            { return ModuleTypes.ATOM;
            }
          case 91: break;
          case 4: 
            { return ModuleTypes.MINUS;
            }
          case 92: break;
          case 5: 
            { return ModuleTypes.INTEGER;
            }
          case 93: break;
          case 6: 
            { return ModuleTypes.VARIABLE;
            }
          case 94: break;
          case 7: 
            { return ModuleTypes.DOT;
            }
          case 95: break;
          case 8: 
            { return ModuleTypes.PLUS;
            }
          case 96: break;
          case 9: 
            { return ModuleTypes.INV;
            }
          case 97: break;
          case 10: 
            { return ModuleTypes.LINE_COMMENT;
            }
          case 98: break;
          case 11: 
            { return ModuleTypes.COMMA;
            }
          case 99: break;
          case 12: 
            { return ModuleTypes.EQ;
            }
          case 100: break;
          case 13: 
            { return ModuleTypes.OBRACKET;
            }
          case 101: break;
          case 14: 
            { return ModuleTypes.CBRACKET;
            }
          case 102: break;
          case 15: 
            { return ModuleTypes.OPAREN;
            }
          case 103: break;
          case 16: 
            { return ModuleTypes.CPAREN;
            }
          case 104: break;
          case 17: 
            { return ModuleTypes.OPEN_CURLY;
            }
          case 105: break;
          case 18: 
            { return ModuleTypes.CLOSE_CURLY;
            }
          case 106: break;
          case 19: 
            { return ModuleTypes.BANG;
            }
          case 107: break;
          case 20: 
            { return ModuleTypes.WHAT;
            }
          case 108: break;
          case 21: 
            { return ModuleTypes.LT;
            }
          case 109: break;
          case 22: 
            { return ModuleTypes.SEMI;
            }
          case 110: break;
          case 23: 
            { return ModuleTypes.BAR;
            }
          case 111: break;
          case 24: 
            { return ModuleTypes.GT;
            }
          case 112: break;
          case 25: 
            { return ModuleTypes.MULT;
            }
          case 113: break;
          case 26: 
            { return ModuleTypes.COLON;
            }
          case 114: break;
          case 27: 
            { return ModuleTypes.SLASH;
            }
          case 115: break;
          case 28: 
            { return ModuleTypes.POW2;
            }
          case 116: break;
          case 29: 
            { return ModuleTypes.AS;
            }
          case 117: break;
          case 30: 
            { return ModuleTypes.IF;
            }
          case 118: break;
          case 31: 
            { return ModuleTypes.DO;
            }
          case 119: break;
          case 32: 
            { return ModuleTypes.IMPLIES;
            }
          case 120: break;
          case 33: 
            { return ModuleTypes.SQSTRING;
            }
          case 121: break;
          case 34: 
            { return ModuleTypes.UNPLUS;
            }
          case 122: break;
          case 35: 
            { return ModuleTypes.NOT_UNIFY;
            }
          case 123: break;
          case 36: 
            { return ModuleTypes.BITWISE_OR;
            }
          case 124: break;
          case 37: 
            { return ModuleTypes.DQSTRING;
            }
          case 125: break;
          case 38: 
            { return ModuleTypes.IDENTICAL;
            }
          case 126: break;
          case 39: 
            { return ModuleTypes.LEQ;
            }
          case 127: break;
          case 40: 
            { return ModuleTypes.REVERSE_SNEK;
            }
          case 128: break;
          case 41: 
            { return ModuleTypes.BITSHIFT_LEFT;
            }
          case 129: break;
          case 42: 
            { return ModuleTypes.GE;
            }
          case 130: break;
          case 43: 
            { return ModuleTypes.BITSHIFT_RIGHT;
            }
          case 131: break;
          case 44: 
            { return ModuleTypes.POW;
            }
          case 132: break;
          case 45: 
            { return ModuleTypes.GENERAL_LT;
            }
          case 133: break;
          case 46: 
            { return ModuleTypes.GENERAL_GT;
            }
          case 134: break;
          case 47: 
            { return ModuleTypes.BITWISE_AND;
            }
          case 135: break;
          case 48: 
            { return ModuleTypes.INT_DIV;
            }
          case 136: break;
          case 49: 
            { return ModuleTypes.SELECTOR_VAL;
            }
          case 137: break;
          case 50: 
            { return ModuleTypes.NOT;
            }
          case 138: break;
          case 51: 
            { return ModuleTypes.FOCUS_VAL;
            }
          case 139: break;
          case 52: 
            { return ModuleTypes.LOG;
            }
          case 140: break;
          case 53: 
            { return ModuleTypes.BEL;
            }
          case 141: break;
          case 54: 
            { return ModuleTypes.REAL;
            }
          case 142: break;
          case 55: 
            { return ModuleTypes.NOT_IDENTICAL;
            }
          case 143: break;
          case 56: 
            { return ModuleTypes.USE;
            }
          case 144: break;
          case 57: 
            { return ModuleTypes.UNIV;
            }
          case 145: break;
          case 58: 
            { return ModuleTypes.VARIANT;
            }
          case 146: break;
          case 59: 
            { return ModuleTypes.EVALUATES;
            }
          case 147: break;
          case 60: 
            { return ModuleTypes.PARTIAL_UNIFICATION;
            }
          case 148: break;
          case 61: 
            { return ModuleTypes.SOFT_IMPLIES;
            }
          case 149: break;
          case 62: 
            { return ModuleTypes.GENERAL_LE;
            }
          case 150: break;
          case 63: 
            { return ModuleTypes.GENERAL_GE;
            }
          case 151: break;
          case 64: 
            { return ModuleTypes.TRUE;
            }
          case 152: break;
          case 65: 
            { return ModuleTypes.THEN;
            }
          case 153: break;
          case 66: 
            { return ModuleTypes.SENT;
            }
          case 154: break;
          case 67: 
            { return ModuleTypes.SEND;
            }
          case 155: break;
          case 68: 
            { return ModuleTypes.EXIT;
            }
          case 156: break;
          case 69: 
            { return ModuleTypes.DROP;
            }
          case 157: break;
          case 70: 
            { return ModuleTypes.GOAL;
            }
          case 158: break;
          case 71: 
            { return ModuleTypes.NOT_VARIANT;
            }
          case 159: break;
          case 72: 
            { return ModuleTypes.ADOPT;
            }
          case 160: break;
          case 73: 
            { return ModuleTypes.ORDER;
            }
          case 161: break;
          case 74: 
            { return ModuleTypes.EXIT_VAL;
            }
          case 162: break;
          case 75: 
            { return ModuleTypes.PRINT;
            }
          case 163: break;
          case 76: 
            { return ModuleTypes.BASIC_USAGE_VAL;
            }
          case 164: break;
          case 77: 
            { return ModuleTypes.FOCUS;
            }
          case 165: break;
          case 78: 
            { return ModuleTypes.AGOAL;
            }
          case 166: break;
          case 79: 
            { return ModuleTypes.INSERT;
            }
          case 167: break;
          case 80: 
            { return ModuleTypes.ORDER_VAL;
            }
          case 168: break;
          case 81: 
            { return ModuleTypes.DELETE;
            }
          case 169: break;
          case 82: 
            { return ModuleTypes.DEFINE;
            }
          case 170: break;
          case 83: 
            { return ModuleTypes.GOALA;
            }
          case 171: break;
          case 84: 
            { return ModuleTypes.FORALL;
            }
          case 172: break;
          case 85: 
            { return ModuleTypes.MODULE;
            }
          case 173: break;
          case 86: 
            { return ModuleTypes.PERCEPT;
            }
          case 174: break;
          case 87: 
            { return ModuleTypes.LISTALL;
            }
          case 175: break;
          case 88: 
            { return ModuleTypes.EXIT_MODULE;
            }
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
